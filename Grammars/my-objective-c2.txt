translation_unit	: external_decl
			| translation_unit external_decl
			;
external_decl		: function_definition
			| decl
            | class_interface
            | class_implementation
            | category_interface
            | category_implementation
            | protocol_declaration
            | protocol_declaration_list
            | class_declaration_list
            | preprocessor_declaration
            ;
preprocessor_declaration :
   '#importglobal' #FILEPATH
   | '#import' #FILEPATH
   | '#define' #MACRO #STRING_CONST
   ;
   
function_definition	: ?decl_specs declarator ?decl_list compound_stat
			;
decl			: decl_specs init_declarator_list ';'
			| decl_specs			';'
			;
decl_list		: decl
			| decl_list decl
			;
decl_specs		: ?declspec storage_class_spec ?decl_specs
			| ?declspec type_spec ?decl_specs
			| ?declspec type_qualifier ?decl_specs
			;
declspec :
            '(' '__declspec' ')'
            ;
            
storage_class_spec	: 'auto' | 'register' | 'static' | 'extern' | 'typedef'
			;
type_spec		: 'void' | 'char' | 'short' | 'int' | 'long' | 'float'
			| 'double' | 'signed' | 'unsigned' | 'BOOL'
            | 'id' ?protocol_reference_list
            | class_name ?protocol_reference_list
			| struct_or_union_spec
			| enum_spec
			| typedef_name
			;
type_qualifier		: 'const' | 'volatile' | protocol_qualifier
			;

protocol_qualifier : 
    'in'
    | 'out'
    | 'inout'
    | 'bycopy'
    | 'byref'
    | 'oneway'
    ;

struct_or_union_spec	: struct_or_union ?id '{' struct_decl_list '}'
            | struct_or_union ?id '{' '@defs’ '('  struct_decl_list ')' '}'
			| struct_or_union id
			;
struct_or_union		: 'struct' | 'union'
			;
struct_decl_list	: struct_decl
			| struct_decl_list struct_decl
			;
init_declarator_list	: init_declarator
			| init_declarator_list ',' init_declarator
			;
init_declarator		: declarator
			| declarator '=' initializer
			;
struct_decl		: spec_qualifier_list struct_declarator_list ';'
			;
spec_qualifier_list	: type_spec spec_qualifier_list
			| type_spec
			| type_qualifier spec_qualifier_list
			| type_qualifier
			;
struct_declarator_list	: struct_declarator
			| struct_declarator_list ',' struct_declarator
			;
struct_declarator	: declarator
			| declarator ':' const_exp
			|		':' const_exp
			;
enum_spec		: 
              'enum' id '{' enumerator_list '}'
			| 'enum'	'{' enumerator_list '}'
            | 'enum' id '{' enumerator_list ',' '}'
			| 'enum'	'{' enumerator_list ',' '}'
			| 'enum' id
			;
enumerator_list		: enumerator
			| enumerator_list ',' enumerator
			;
enumerator		: id
			| id '=' const_exp
			;
declarator		: pointer direct_declarator
			|	direct_declarator
			;
direct_declarator	: id
			| '(' declarator ')'
			| direct_declarator '[' const_exp ']'
			| direct_declarator '['		']'
			| direct_declarator '(' param_type_list ')'
			| direct_declarator '(' id_list ')'
			| direct_declarator '('		')'
			;
pointer			: '*' type_qualifier_list
			| '*'
			| '*' type_qualifier_list pointer
			| '*'			pointer
			;
type_qualifier_list	: type_qualifier
			| type_qualifier_list type_qualifier
			;
param_type_list		: param_list
			| param_list ',' '...'
			;
param_list		: param_decl
			| param_list ',' param_decl
			;
param_decl		: decl_specs declarator
			| decl_specs abstract_declarator
			| decl_specs
			;
id_list			: id
			| id_list ',' id
			;
initializer		: assignment_exp
			| '{' initializer_list '}'
			| '{' initializer_list ',' '}'
			;
initializer_list	: initializer
			| initializer_list ',' initializer
            | designation initializer
			| initializer_list ',' designation initializer
			;
type_name		: spec_qualifier_list abstract_declarator
			| spec_qualifier_list
			;
designation :
            {designator} '='
            ;
designator :
            '[' const_exp ']'
            | '.' id
            ;
abstract_declarator	: pointer
			| pointer direct_abstract_declarator
			|	direct_abstract_declarator
			;
direct_abstract_declarator: '(' abstract_declarator ')'
			| direct_abstract_declarator '[' const_exp ']'
			|				'[' const_exp ']'
			| direct_abstract_declarator '['	']'
			|				'['	']'
			| direct_abstract_declarator '(' param_type_list ')'
			|				'(' param_type_list ')'
			| direct_abstract_declarator '('		')'
			|				'('		')'
			;
typedef_name		: id
			;
stat			: labeled_stat
			| exp_stat
			| compound_stat
			| selection_stat
			| iteration_stat
			| jump_stat
			;
labeled_stat		: id ':' stat
			| 'case' const_exp ':' stat
			| 'default' ':' stat
			;
exp_stat		: exp ';'
			|	';'
			;
compound_stat		: '{' decl_list stat_list '}'
			| '{'		stat_list '}'
			| '{' decl_list		'}'
			| '{'			'}'
			;
stat_list		: stat
			| stat_list stat
			;
selection_stat		: 'if' '(' exp ')' stat
			| 'if' '(' exp ')' stat 'else' stat
			| 'switch' '(' exp ')' stat
			;
iteration_stat		: 'while' '(' exp ')' stat
			| 'do' stat 'while' '(' exp ')' ';'
			| 'for' '(' exp ';' exp ';' exp ')' stat
			| 'for' '(' exp ';' exp ';'	')' stat
			| 'for' '(' exp ';'	';' exp ')' stat
			| 'for' '(' exp ';'	';'	')' stat
			| 'for' '('	';' exp ';' exp ')' stat
			| 'for' '('	';' exp ';'	')' stat
			| 'for' '('	';'	';' exp ')' stat
			| 'for' '('	';'	';'	')' stat
            | 'for' '(' for_in_iteration_variable 'in' exp ')' stat
			;
for_in_iteration_variable :
    param_decl | id
    ;
    
jump_stat		: 'goto' id ';'
			| 'continue' ';'
			| 'break' ';'
			| 'return' exp ';'
			| 'return'	';'
			;
exp			: assignment_exp
			| exp ',' assignment_exp
			;
assignment_exp		: conditional_exp
			| unary_exp assignment_operator assignment_exp
			;
assignment_operator	: '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
			| '>>=' | '&=' | '^=' | '|='
			;
conditional_exp		: logical_or_exp
			| logical_or_exp '?' exp ':' conditional_exp
			;
const_exp		: conditional_exp
			;
logical_or_exp		: logical_and_exp
			| logical_or_exp '||' logical_and_exp
			;
logical_and_exp		: inclusive_or_exp
			| logical_and_exp '&&' inclusive_or_exp
			;
inclusive_or_exp	: exclusive_or_exp
			| inclusive_or_exp '|' exclusive_or_exp
			;
exclusive_or_exp	: and_exp
			| exclusive_or_exp '^' and_exp
			;
and_exp			: equality_exp
			| and_exp '&' equality_exp
			;
equality_exp		: relational_exp
			| equality_exp '==' relational_exp
			| equality_exp '!=' relational_exp
			;
relational_exp		: shift_expression
			| relational_exp '<' shift_expression
			| relational_exp '>' shift_expression
			| relational_exp '<=' shift_expression
			| relational_exp '>=' shift_expression
			;
shift_expression	: additive_exp
			| shift_expression '<<' additive_exp
			| shift_expression '>>' additive_exp
			;
additive_exp		: mult_exp
			| additive_exp '+' mult_exp
			| additive_exp '-' mult_exp
			;
mult_exp		: cast_exp
			| mult_exp '*' cast_exp
			| mult_exp '/' cast_exp
			| mult_exp '%' cast_exp
			;
cast_exp		: unary_exp
			| '(' type_name ')' cast_exp
			;
unary_exp		: postfix_exp
			| '++' unary_exp
			| '--' unary_exp
			| unary_operator cast_exp
			| 'sizeof' unary_exp
			| 'sizeof' '(' type_name ')'
			;
unary_operator		: '&' | '*' | '+' | '-' | '~' | '!'
			;
postfix_exp		: primary_exp
			| postfix_exp '[' exp ']'
			| postfix_exp '(' argument_exp_list ')'
			| postfix_exp '('			')'
			| postfix_exp '.' id
			| postfix_exp '->' id
			| postfix_exp '++'
			| postfix_exp '--'
            | '(' type_name ')' '{' initializer_list ',' '}'
            | '(' type_name ')' '{' initializer_list '}'
			;
primary_exp		: id
			| const
			| string
			| '(' exp ')'
            | 'self'
            | message_expression
            | selector_expression
            | protocol_expression
            | encode_expression
            ;

argument_exp_list	: assignment_exp
			| argument_exp_list ',' assignment_exp
			;
const			: int_const
			| #CONST_CHAR
            | #CONST_STRING
			| float_const
			| enumeration_const
			;
            

superclass_stat :
    ':' superclass_name
    ;
    
class_interface : 
    '@interface' class_name ?superclass_stat ?protocol_reference_list ?instance_variables ?interface_declaration_list '@end'
    ;

class_implementation : 
    '@implementation' class_name ?superclass_stat ?implementation_definition_list '@end' 
    ;

category_interface : 
    '@interface' class_name '(' category_name ')' ?protocol_reference_list ?interface_declaration_list '@end'
    ;

category_implementation : 
    '@implementation' class_name '(' category_name ')' ?implementation_definition_list '@end'
    ;

protocol_declaration : 
    '@protocol' protocol_name ?protocol_reference_list ?interface_declaration_list '@end'
    ;

protocol_declaration_list : 
    '@protocol' protocol_list ';'
    ;
    
class_declaration_list : 
    '@class' *class_name ';'
    ;

class_list : 
    class_name
    | class_list ',' class_name
    ;

protocol_reference_list : 
    '<' protocol_list '>'
    ;
    
protocol_list : 
    protocol_name
    | protocol_list ',' protocol_name
    ;
    
class_name : 
    id
    ;

superclass_name : 
    id
    ;
    
category_name : 
    id
    ;
    
protocol_name : 
    id
    ;
    
instance_variables : 
    '{' '}'
    | '{' instance_variable_declaration '}'
    ;

instance_variable_declaration : 
    visibility_specification  ?struct_decl_list 
    | ?visibility_specification  struct_decl_list instance_variables
    ;

visibility_specification : 
    '@private'
    | '@protected'
    | '@package'
    | '@public'
    ;
    
interface_declaration_list : 
    ?interface_declaration_list decl
    | ?interface_declaration_list method_declaration
    | ?interface_declaration_list property_declaration
    ;

method_declaration : 
    class_method_declaration
    | instance_method_declaration
    ;
    
class_method_declaration : 
    '+' ?method_type method_selector ';'
    ;
    
instance_method_declaration : 
    '–' ?method_type method_selector ';'
    ;
    
implementation_definition_list : 
    ?implementation_definition_list property_implementation
    | ?implementation_definition_list function_definition
    | ?implementation_definition_list decl
    | ?implementation_definition_list method_definition
    ;

method_definition : 
    class_method_definition
    | instance_method_definition
    ;
    
class_method_definition : 
    '+' ?method_type method_selector ?declaration_list compound_statement
    ;
    
instance_method_definition : 
    '–' ?method_type method_selector ?declaration_list compound_statement
    ;
    
method_selector : 
    unary_selector
    | keyword_selector
    | keyword_selector ',' '...'
    | keyword_selector ',' parameter_type_list
    ;

unary_selector : 
    selector
    ;
    
keyword_selector : 
    *keyword_declarator
    ;
    
keyword_declarator : 
    ':'  ?method_type id
    | selector ':'  ?method_type id
    ;

selector : 
    id
    ;

method_type : 
    '(' type_name ')'
    ;
   
message_expression : 
    '[' receiver message_selector ']'
    ;

receiver : 
    expression
    | class_name
    | 'super'
    ;

message_selector : 
    selector
    | keyword_argument_list
    ;

keyword_argument_list : 
    keyword_argument
    | keyword_argument_list keyword_argument
    ;

keyword_argument : 
    selector  ':'  expression
    | ':'  expression
    ;

selector_expression : 
    '@selector' '(' selector_name ')'
    ;
    
selector_name : 
    selector
    | keyword_name_list
    ;

keyword_name_list : 
    *keyword_name
    ;

keyword_name : 
    selector ':'
    | ':'
    ;
        
protocol_expression : 
    '@protocol' '(' protocol_name ')'
    ;

encode_expression : 
    '@encode' '(' type_name ')'
    ;

exception_declarator : 
    decl
    ;

try_statement : 
    '@try' stat
    ;

catch_statement : 
    '@catch' '(' exception_declarator ')' stat
    ;

finally_statement : 
    '@finally' stat
    ;

throw_statement : 
    '@throw' primary_exp
    ;

try_block : 
    try_statement catch_statement ?finally_statement
    ;

synchronized_statement : 
    '@synchronized' '(' id ')' stat
    ;

property_declaration  : 
    '@property' ?property_attributes_declaration struct_decl
    ;

property_attributes_declaration  : 
    '(' property_attributes ')'
    ;

property_implementation : 
    '@synthesize' property_synthesize_list ';'
    | '@dynamic' id_list ';'
    ;

property_synthesize_list  : 
    property_synthesize_list ',' id
    | id
    ;

property_attributes :
    *property_attribute
    ;

property_attribute :
    property_ident
    | 'getter' '=' id
    | 'setter' '=' id
    ;

property_ident
    'nonatomic'
    | 'readwrite'
    | 'readonly'
    | 'retain'
    | 'assign'
    | 'copy'
    | 'strong'
    ;

id : #ID ;